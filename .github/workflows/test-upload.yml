name: Test File Upload

on:
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: true
        default: 'single-file'
        type: choice
        options:
          - single-file
          - multiple-files
          - directory
          - wildcard-patterns
          - large-files
      bucket:
        description: 'OBS bucket name for testing'
        required: false
        type: string
      region:
        description: 'OBS region'
        required: false
        default: 'cn-north-4'
        type: string

env:
  OBS_BUCKET: ${{ inputs.bucket || secrets.OBS_BUCKET }}
  OBS_ACCESS_KEY: ${{ secrets.OBS_ACCESS_KEY }}
  OBS_SECRET_KEY: ${{ secrets.OBS_SECRET_KEY }}
  OBS_REGION: ${{ inputs.region || 'cn-north-4' }}

jobs:
  test-upload:
    runs-on: ubuntu-latest
    name: Test Upload - ${{ inputs.test_scenario }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          # Make script executable and run it
          chmod +x generate-test-files.sh
          ./generate-test-files.sh

      - name: Test Single File Upload
        if: inputs.test_scenario == 'single-file'
        uses: ./
        with:
          access_key: ${{ env.OBS_ACCESS_KEY }}
          secret_key: ${{ env.OBS_SECRET_KEY }}
          region: ${{ env.OBS_REGION }}
          bucket: ${{ env.OBS_BUCKET }}
          operation: upload
          local_path: test-files/simple.txt
          obs_path: test-uploads/single/
          progress: true
          dry_run: false

      - name: Test Multiple Files Upload
        if: inputs.test_scenario == 'multiple-files'
        uses: ./
        with:
          access_key: ${{ env.OBS_ACCESS_KEY }}
          secret_key: ${{ env.OBS_SECRET_KEY }}
          region: ${{ env.OBS_REGION }}
          bucket: ${{ env.OBS_BUCKET }}
          operation: upload
          local_path: test-files/documents/doc1.txt,test-files/documents/doc2.txt,test-files/images/image1.jpg
          obs_path: test-uploads/multiple/
          progress: true
          concurrency: 3

      - name: Test Directory Upload
        if: inputs.test_scenario == 'directory'
        uses: ./
        with:
          access_key: ${{ env.OBS_ACCESS_KEY }}
          secret_key: ${{ env.OBS_SECRET_KEY }}
          region: ${{ env.OBS_REGION }}
          bucket: ${{ env.OBS_BUCKET }}
          operation: upload
          local_path: test-files/
          obs_path: test-uploads/directory/
          preserve_structure: true
          progress: true
          concurrency: 5

      - name: Test Wildcard Patterns Upload
        if: inputs.test_scenario == 'wildcard-patterns'
        uses: ./
        with:
          access_key: ${{ env.OBS_ACCESS_KEY }}
          secret_key: ${{ env.OBS_SECRET_KEY }}
          region: ${{ env.OBS_REGION }}
          bucket: ${{ env.OBS_BUCKET }}
          operation: upload
          local_path: test-files/**/*.txt
          obs_path: test-uploads/wildcard/
          exclude: "*.bin,*large*"
          preserve_structure: true
          progress: true

      - name: Test Large Files Upload
        if: inputs.test_scenario == 'large-files'
        uses: ./
        with:
          access_key: ${{ env.OBS_ACCESS_KEY }}
          secret_key: ${{ env.OBS_SECRET_KEY }}
          region: ${{ env.OBS_REGION }}
          bucket: ${{ env.OBS_BUCKET }}
          operation: upload
          local_path: test-files/large-file.bin
          obs_path: test-uploads/large/
          progress: true
          checksum_validation: true
          storage_class: STANDARD
          retry_count: 5

      - name: Verify Upload Results
        run: |
          echo "Upload test completed for scenario: ${{ inputs.test_scenario }}"
          echo "Check the action outputs and OBS bucket for uploaded files"

      - name: Cleanup Test Files
        if: always()
        run: |
          rm -rf test-files/
          echo "Test files cleaned up"
